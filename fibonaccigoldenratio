.data
fibonnaci30: .asciiz "O valor do fibonnaci de 30: "   
fibonnaci41: .asciiz "O valor do fibonnaci de 41: "  
fibonnaci40: .asciiz "O valor do fibonnaci de 40: "
resultado_razaoaurea: .asciiz "O resultado da razão áurea é: "

.text
.globl main

main: 
  # Calcula Fibonacci(30)
  li $a0, 30
  jal fibonacci
  move $s1, $v0
  
  # Calcula Fibonacci(41)
  li $a0, 41
  jal fibonacci
  move $s2, $v0
  
  # Calcula Fibonacci(40)
  li $a0, 40
  jal fibonacci
  move $s3, $v0
  
  # Exibe Fibonacci(30)
  la $a0, fibonnaci30   
  li $v0, 4        
  syscall
  li $v0, 1
  move $a0, $s1
  syscall
  jal pular_linha
  
  # Exibe Fibonacci(41)
  la $a0, fibonnaci41    
  li $v0, 4        
  syscall
  li $v0, 1
  move $a0, $s2
  syscall
  jal pular_linha
  
  # Exibe Fibonacci(40)
  la $a0, fibonnaci40   
  li $v0, 4        
  syscall
  li $v0, 1
  move $a0, $s3
  syscall
  jal pular_linha

  # Calcula e exibe a razão áurea
  move $a0, $s2  # Passa o valor de Fibonacci(41) para $a0
  move $a1, $s3  # Passa o valor de Fibonacci(40) para $a1
  jal razao_aurea
  
  # Exibe resultado da razão áurea
  li $v0, 4
  la $a0, resultado_razaoaurea
  syscall
  li $v0, 2         
  mov.s $f12, $f0   
  syscall
  jal pular_linha

  # Finaliza o programa
  li $v0, 10
  syscall


# Função para imprimir uma nova linha
pular_linha:
  li $v0, 11
  li $a0, '\n'
  syscall
  jr $ra

fibonacci:
  li $t0, 2 
  li $t1, 1 
  li $t2, 1 
  ble $a0, $zero, zero
  fibonacci_loop:
    beq $a0, $t0, end_loop
    add $t3, $t1, $t2
    move $t1, $t2
    move $t2, $t3
    addi $t0, $t0, 1
    j fibonacci_loop
  end_loop:
    move $v0, $t3 
    j pos_zero
  zero:
    move $v0, $zero 
  pos_zero:
    jr $ra 

razao_aurea:
  beq $a1, $zero, return_aurea
  
  mtc1 $a0, $f2     
  mtc1 $a1, $f4     
  cvt.s.w $f2, $f2  
  cvt.s.w $f4, $f4  
  div.s $f0, $f2, $f4   
  j end_return_aurea
  
return_aurea:
  move $v0, $zero 

end_return_aurea:
  jr $ra
